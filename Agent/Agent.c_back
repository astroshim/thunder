#include "./Include.h"
/*
#include <stropts.h>
#include <arpa/inet.h>
#include <sys/resource.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <stdarg.h>
*/
#include <sys/ioctl.h>
#include <net/if.h>
#include <arpa/inet.h>
#include <time.h>

int		connect_tcp_socket(char *, int);
int		timed_send(int, const char *, int, struct timeval *);

int g_Call;
// main 함수 로컨별수를 global 변수로 옮겨옴..why? sysinfo에서 사용하려구 
int  giComCode = 0; 

/*
// use curl
#include <curl/curl.h>
int postdata(char *buf)
{
	CURL *curl;
	CURLcode res;

	curl = curl_easy_init();
	if(curl) {
		curl_easy_setopt(curl, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_0);
		curl_easy_setopt(curl, CURLOPT_URL, "http://gm.gridcdn.com/remote/getAgentInfo.php");
		curl_easy_setopt(curl, CURLOPT_POSTFIELDS, buf);

		res = curl_easy_perform(curl);
		curl_easy_cleanup(curl);
	} else {
		return -1;
	}
	return 0;
}
*/

//void GetIP(unsigned long *_piIp)
int GetIP(char *_pchIp, char *_pchMac)
{
    int sock, ret;
    struct ifreq ifr;

    sock = socket (PF_INET, SOCK_STREAM, 0);
    if (sock < 0)
    {
		Log("In GetIP socket() error ! ");
        return -1;
    }
    strcpy(ifr.ifr_name, "eth0");
    // Get IP Adress
    ret = ioctl (sock, SIOCGIFADDR, &ifr);
    if (ret < 0)
    {
	    strcpy(ifr.ifr_name, "eth1");
    	ret = ioctl (sock, SIOCGIFADDR, &ifr);
		if(ret < 0)
		{
        	close(sock);
			Log("In GetIP ioctl() error! (%d)(%s)", errno, strerror(errno));
        	return -1;
		}
    }
	//strcpy(_pchIp, inet_ntoa(((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr.s_addr));
	strcpy(_pchIp, inet_ntoa(((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr));


	if(_pchMac != NULL)
	{
		// mac address
		ret = ioctl (sock, SIOCGIFHWADDR, &ifr);
		if (ret < 0)
		{   
			close(sock);
			return 0;
		}
		struct sockaddr *sa = &(ifr.ifr_hwaddr);;
/*
		//memcpy((void *)_pchMac, (void *)&(sa->sa_data), 6);

		struct ether_addr haddr;
		memcpy((void *)&haddr, (void *)_piMac, 6);

*/
		strcpy(_pchMac, (char *)ether_ntoa ((struct ether_addr *)&(sa->sa_data)));
	}

    close(sock);

//    *_piIp = ((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr.s_addr;
	return 0;
}

int timed_send(int sock, const char *buf, int size, struct timeval *timeout)
{
	fd_set set;
	int nset, cnt;
	int send_size;

	FD_ZERO(&set);
		nset = sock + 1;
	FD_ZERO(&set);
	FD_SET(sock, &set);


	if ((cnt = select(nset, 0, &set, 0, timeout)) == 0) return(-1);
	if (cnt < 0) {
		return(-1);
	}
	if (FD_ISSET(sock, &set))  {
		send_size = send(sock, buf, size, 0);
		return(send_size);
	}
	return(-1);
}

int timed_recv(int sock, char *buf, int size, struct timeval *timeout)
{
    fd_set set;
    int     iSet, iCnt;
    int     iRecvSize;
    
    if(sock < 0)
    {   
        return -1;
    }
    
    iSet = sock + 1;
    FD_ZERO(&set);
    FD_SET(sock, &set);
    
    if( (iCnt = select(iSet, &set, 0, 0, timeout)) == 0)
    {   
        return -1;
    }
    
    if( iCnt < 0)
    {   
        return -1;
    }

/*
    ioctl( sock, FIONREAD, &_iSize );
    if( _iSize == 0 )   // 세션 종료시 ioctl은 nread에 0을 대입합니다.
    { 
        return -1;
    }
//printf("Socket buffer에 있는 data 양 => [%d] \n", _iSize);
*/
    if(FD_ISSET(sock, &set))
    {   
        iRecvSize = recv(sock, buf, size, 0);
        return iRecvSize;
    }
    
    return -1;
}

int connect_tcp_socket(char *addr, int port)
{
    int sockfd;
    struct sockaddr_in sin;
    /*
    ** Open a TCP socket (Internet stream socket)
    */
    if ( (sockfd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) < 0 ) {
            Log("Can't get AF_INET sockfd, reason=%s", strerror(errno));
            return(-1);
    }
    /*
    ** Connect to the server
    */
    bzero((void*)&sin, sizeof(sin));
    sin.sin_family = AF_INET;
    sin.sin_addr.s_addr = inet_addr(addr);
    sin.sin_port = htons((u_short)port);

    if ( connect(sockfd, (struct sockaddr*)&sin, sizeof sin) < 0 ) {
            Log("Can't connect to %s port %d, reason=%s", addr, port,
                    strerror(errno));
            close(sockfd);
            return(-1);
    }

    Log("Connected to %s port %d", addr, port);
    return(sockfd);
}

const int CallWeb(const int _iComCode
					,const char *_pchIP
					,const char *_pchMac
					,const unsigned long _nMemory
					,const float _fLoadAvg
					,const unsigned long long _iCpu
					,const unsigned long long _nDisk)
{
	int		sock;
	int		port;
	int		ret;
	char	send_data[1024*10];
	char	recv_data[1024*10];
	char	pchVersion[65];
	int		ResultCode;

	struct hostent * host_info;
	struct in_addr inAddr;
	struct timeval timeout;

	int iDNCnt = 0;

	timeout.tv_sec = (long)10;
	timeout.tv_usec = 0;

	host_info = gethostbyname("gm.gridcdn.com");
	port = 80;

	if( host_info != NULL )
		inAddr = *(struct in_addr *)host_info->h_addr;
	else	/*	get ip fail */
		return -1;

	memset(pchVersion, 0x00, sizeof(pchVersion));
	GetDNServerVersion(pchVersion);

	//int hour = 0;
	//GetFtpTraffic(&hour, &ftp_cps);
	unsigned long long ftp_cps = 0;
	char pchDate[16];
	memset(pchDate, 0x00, sizeof(pchDate));
	if(g_Call == 1)
	{
		GetFtpTraffic(pchDate, &ftp_cps);
	}

	char pchCps[1024];
	memset(pchCps, 0x00, sizeof(pchCps));
	GetKcps2(pchCps);

	iDNCnt = GetDownloadConnCnt();
	memset(send_data, 0x00, sizeof(send_data));
	sprintf(send_data,   "GET /remote/getAgentInfo.php?comcode=%d&version=%s&ip=%s&mac=%s&mem=%lu&load=%.2f&cpu=%llu&space=%llu&dm_client=%d&dn_client=%d&ftp_client=%d&%s&alive=%d&hour=%s&ftpcps=%llu HTTP/1.1\r\nAccept: */*\r\nConnection: Keep-Alive\r\nHost: gm.gridcdn.com\r\n\r\n",
							_iComCode, 
							pchVersion,
							_pchIP,
							_pchMac,
							_nMemory,
							_fLoadAvg,
							_iCpu,
							_nDisk, 
							GetDSMgrConnCnt(), 
							iDNCnt, 
							GetFtpCount(), 
							pchCps, 
							CheckDNServer(),
							pchDate,
							ftp_cps);

#ifdef _ZFILE
	char tmp[64] = {0,};
	sprintf(tmp, "echo %d > /home/mons/public_html/zfile_user.log", iDNCnt);
    system(tmp);
#elif _VHARD
	char tmp[64] = {0,};
	sprintf(tmp, "echo %d > /home/mons/public_html/vhard_user.log", iDNCnt);
    system(tmp);
#endif

	Log("Trying to connect to '%s' port=%d data=(%s)", inet_ntoa(inAddr), port, send_data);

	if ( (sock = connect_tcp_socket( inet_ntoa(inAddr), port)) == -1 ) {
		Log("In CallWeb, Connection NOT established");
		return -1;
	}

	ret = timed_send(sock, send_data, strlen(send_data), &timeout);
	if( ret <= 0 ) 
	{
		Log("In CallWeb, write ret = '%d', reason='%s'", ret, strerror(errno));
		close(sock);
		return -1;
	}

	ret = timed_recv(sock, recv_data, sizeof(recv_data), &timeout);
	if( ret <= 0 ) {
		Log("In CallWeb, read ret = '%d', reason='%s'", ret, strerror(errno));
		close(sock);
		return -1;
	}
	close(sock);
Log("ret => (%s)", recv_data);

/*
	if( (ResultCode = GetResultCode(recv_data)) == 0 )
		return 1;
	else if( ResultCode == 9999 )
		return 0;
	else
		return -1;
*/
	return 0;
}

void print_usage(char *argv0)
{
    printf("\n");
    printf("%s Build Date Time =[%s %s]\n", argv0, __DATE__, __TIME__);
    printf("\n");
    printf("USAGE : %s [comcode] [volumne]\n", argv0);
    printf("[comcode] : grid_id \n");
    printf("[volume]  : VOLNAME in DS.properties\n");
    printf("\n");

}

int main(int argc, char *argv[])
{
/*
	struct sysinfo cs;
	if (getsysinfo(&cs) == 0) 
	{
		printf("memused=%d, TLoadAvg=%d, cpu=%d, freespace=%d \n", cs.muse, cs.avg, cs.cpu, cs.freespace);
	}
*/

/*
	unsigned long long nUser1, nSystem1, nIdle1, nSum1;
	unsigned long long nUser2, nSystem2, nIdle2, nSum2;
*/
	char send_data[1024*2];
	char pchMyIP[20], pchMac[24];
    char pchVolName[64];
    char pchLogName[PATH_MAX + 1];
  
	TLoadAvg tLoadAvg;
	TMemory tMem;
	TDF tDf;
	TCpuUsage tCpuUsage1, tCpuUsage2;
	unsigned long long nCpuUsage, nSum;
	int iResult = 0;
/*
unsigned long long ftpcps = 0;
int hour = 0;
GetFtpTraffic(&hour, &ftpcps);
return 0;
*/

	memset(&tLoadAvg, 0, sizeof(TLoadAvg));
	memset(&tMem, 0, sizeof(TMemory));
	memset(&tDf, 0, sizeof(TDF));
	memset(&tCpuUsage1, 0, sizeof(TCpuUsage));
	memset(&tCpuUsage2, 0, sizeof(TCpuUsage));
	nCpuUsage= nSum = 0;
	memset(&pchVolName, 0, sizeof(pchVolName));
	memset(&pchLogName, 0, sizeof(pchLogName));


    if(argc != 3)
    {
        print_usage(argv[0]);
        return -1;
    }
    else
    {
        giComCode = atoi(argv[1]);
        snprintf(pchVolName, sizeof(pchVolName), "%s", argv[2]);
    }

/*
	giComCode = 123;
    snprintf(pchVolName, sizeof(pchVolName), "%s", "disk");
*/

    // log file open

#ifdef _VHARD
    //OpenLogFile("./agent_vhard.log");
    sprintf(pchLogName, "./agent_vhard.log");
#elif _BOMUL
    //OpenLogFile("./agent_bomul.log");
    sprintf(pchLogName, "./agent_bomul.log");
#elif _SHAREBOX
    //OpenLogFile("./agent_sharebox.log");
    sprintf(pchLogName, "./agent_sharebox.log");
#else
    //OpenLogFile("./agent.log");
    sprintf(pchLogName, "./agent_%d.log", giComCode);
#endif

    OpenLogFile(pchLogName);

    time_t tval;
    struct tm t;
    time(&tval);
    localtime_r(&tval, &t);
	g_Call = 0;

    if(t.tm_min%10 == 0)
    {
		g_Call = 1;
    }
	Log("time : %02d:%02d g_Call=(%d)", t.tm_hour, t.tm_min, g_Call);

	// ip
	memset(pchMyIP, 0x00, sizeof(pchMyIP));
	memset(pchMac, 0x00, sizeof(pchMac));
	if(GetIP(pchMyIP, pchMac) < 0)
	{
		Log("GetIP Error ! ");
		CloseLogFile();
		return 0;
	}
	Log("MyIP =(%s) Mac=(%s) ", pchMyIP, pchMac);

	// disk
/*
#ifdef _JJANGFILE
	GetDf(&tDf, "/disk01");	// jjangfile
#elif _ZFILE
	GetDf(&tDf, "/volume01");	// zfile
#elif _ZIO
	GetDf(&tDf, "/volume/files");	// zfile
#elif _MOMO
	GetDf(&tDf, "/volume01");	// momo
#elif _ONDISK
	GetDf(&tDf, "/volume01");	// ondisk
#elif _KDISK
	GetDf(&tDf, "/volume01");	// kdisk
#elif _VHARD
	GetDf(&tDf, "/volume01");	// vhard
#elif _DAWOONZ
	GetDf(&tDf, "/volume01");	// vhard
#else
	GetDf(&tDf, "/");	
#endif
*/
    GetDf(&tDf, pchVolName);

	Log("TDF disk=(%llu) KB, avail=(%llu) KB", tDf.iDiskSize, tDf.iAvail);

	// memory
	GetMem(&tMem);
	//printf("mem mtotal=(%lu), mfree=(%lu), mbuffer=(%lu), mcached=(%lu)\n", tMem.mtotal, tMem.mfree, tMem.mbuffer, tMem.mcached);
	Log("Memory Use=(%lu) KB", tMem.mtotal- tMem.mfree- tMem.mbuffer- tMem.mcached);

	// load
	GetLoadAvg(&tLoadAvg);
	//Log("load avg =(%.2f)", (float)(tLoadAvg.avg1 * 100.0));
	Log("load avg =(%.2f)", (float)(tLoadAvg.avg1));

    //GetCpuIdle(&tCpuUsage1);
	// cpu
	// 지금 시간에 cpu 정보를 읽어온다.
    GetCpuIdle(&tCpuUsage1);
	
	// 이전에 저장했던 파일을 읽어온다.
	iResult = loadsysinfo(&tCpuUsage2);
	// 읽어온 cpu정보를 저장한다.
	if(savesysinfo(&tCpuUsage1) != 0)
	{
		Log("CPU 정보 저장 에러 ");
		nCpuUsage = 10000;
	}

	if(iResult != 0)
	{
		Log("저장된 .tmp 파일이 없다. ");
		nCpuUsage = 10000;
	}

	int tdiff = tCpuUsage1.ctime - tCpuUsage2.ctime;
	if(tdiff > 120 || tdiff < 0)
	{
		Log("time over ");
		nCpuUsage = 10000;
	}

	if(nCpuUsage >= 10000)
	{
		nCpuUsage = 0;
	}
	else
	{
/*
		nSum = (tCpuUsage1.nUser-tCpuUsage2.nUser) +
				(tCpuUsage1.nNice-tCpuUsage2.nNice) +
				(tCpuUsage1.nSystem-tCpuUsage2.nSystem) +
				(tCpuUsage1.nIdle-tCpuUsage2.nIdle) +
				(tCpuUsage1.nIO-tCpuUsage2.nIO) +
				(tCpuUsage1.nIRQ-tCpuUsage2.nIRQ);
*/
		nSum = (tCpuUsage1.nUser-tCpuUsage2.nUser) +
				(tCpuUsage1.nSystem-tCpuUsage2.nSystem) +
				(tCpuUsage1.nIdle-tCpuUsage2.nIdle) ;
		if(nSum <= 0)
		{
			nCpuUsage = 0;
		}
		else
		{
			nCpuUsage = 10000 - (tCpuUsage1.nIdle-tCpuUsage2.nIdle)*10000/nSum;
		}
	}

/*
    nUser = (tCpuUsage2.nUser - tCpuUsage1.nUser);
    nSystem = (tCpuUsage2.nSystem - tCpuUsage1.nSystem) ;
    nIdle = (tCpuUsage2.nIdle - tCpuUsage1.nIdle);
    nSum =nUser + nSystem + nIdle;
    
    nUser = nUser*100/nSum;
    nSystem = nSystem*100/nSum;
    nIdle = nIdle*100/nSum;
*/
    Log("1idle=(%llu), 2idle=(%llu), nSum=(%llu), cpu usage =(%d)%%", tCpuUsage1.nIdle,tCpuUsage2.nIdle, nSum, nCpuUsage);
/*
*	use curl
	memset(send_data, 0x00, sizeof(send_data));
	sprintf(send_data,   "comcode=%d&ip=%s&mem=%lu&load=%.2f&cpu=%llu&space=%d",
							1, 
							pchMyIP,
							(tMem.mtotal- tMem.mfree- tMem.mbuffer- tMem.mcached),
							(float)(tLoadAvg.avg1 * 100.0),
							(nUser+nSystem),
							tDf.iAvail);
	Log("data=(%s)", send_data);
	postdata(send_data);

return 0;
*/
/*
	int iComCode = 0;

#ifdef _JJANGFILE
	giComCode = JJANGFILE;
#elif _ZFILE
	giComCode = ZFILE;
#elif _ZIO
	giComCode = ZIO;
#elif _MOMO
	giComCode = MOMODISK;
#elif _ONDISK
	giComCode = ONDISK;
#elif _KDISK
	giComCode = KDISK;
#elif _GOGO
	giComCode = GOGODISK;
#elif _CLUBFOS
	giComCode = CLUBFOS;
#elif _MFILE
	giComCode = MFILE;
#elif _DDAOGI
	giComCode = DDAOGI;
#elif _VHARD
	giComCode = VHARD;
#elif _HOME_STORAGE
	giComCode = HOME_STORAGE;
#elif _DAWOONZ
	giComCode = DAWOONZ;
#elif _CLUBNEX
	giComCode = CLUBNEX;
#endif
*/
	CallWeb(giComCode
			,pchMyIP 
			,pchMac 
			,tMem.mtotal- tMem.mfree- tMem.mbuffer- tMem.mcached
			,(float)(tLoadAvg.avg1)
			,nCpuUsage
			,tDf.iAvail);
	CloseLogFile();
	return 0;
}

