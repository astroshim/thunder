#include "../include/SharedMemory.h"

//extern int m_iLogFd;
extern int OpenLogFile(char *_pchFileName);
extern int CloseLogFile();
extern void Log(const char* const message, ...);

int main(int argc, char* argv[])
{
	if(argc < 3)
	{
		printf("Usage : ./ShmView [filename] [view count]\n");
		return -1;
	}

	SharedMemory sm((key_t)1828, 1024*sizeof(struct scoreboard_file));
   	if(!sm.IsStarted())
    {
        printf("SharedMemory 생성 실패1 \n");
		return -1;
	}
	struct scoreboard_file *stInfo;
	stInfo = (struct scoreboard_file *)sm.GetDataPoint();
    if(stInfo == NULL)
    {
        printf("Shm is NULL \n");
        return -1;
    }
printf("Start point	=> (%p), (%d)", stInfo, sizeof(struct scoreboard_file));

	char pchLogFile[128];
	strcpy(pchLogFile, argv[1]);
	OpenLogFile(pchLogFile);

	int iCnt = atoi(argv[2]);
	int iSessionCnt = 0;
	uint64_t iKcps = 0;
	
	for(int i= 0; i < iCnt; i++)
	{
//Log("stInfo[%d]	= (%p)", i, &(stInfo[i]));

		if(stInfo[i].cUse == ON)
		{
			Log("stInfo[%d].cUse 	= (%d)", i, stInfo[i].cUse);
			Log("stInfo[%d].comcode	= (%d)", i, stInfo[i].comcode);
			Log("stInfo[%d].billno 	= (%d)", i, stInfo[i].billno);
			Log("stInfo[%d].kcps 	= (%d)", i, stInfo[i].kcps);
			Log("stInfo[%d].id 		= (%s)", i, stInfo[i].id);
			Log("stInfo[%d].filename = (%s)", i, stInfo[i].filename);

			iKcps += stInfo[i].kcps;
			iSessionCnt++;
		}
	}

	Log("*. Total Session Count = (%d) ", iSessionCnt);
	Log("*. Total kcps = (%llu) ", iKcps);

	CloseLogFile();

	return 0;
}

